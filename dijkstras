import heapq
graph={
    'A': {'B':5,'C':3},
    'B': {'A':5,'C':3,'D':7},
    'C': {'A':3,'B':3,'D':9},
    'D': {'B':7,'C':9}    
}

def dijkstras(graph,start_node):
    distances={node:float('inf') for node in graph}
    distances[start_node]=0
    queue=[(0,start_node)]
    
    while queue:
        current_distance,current_node=heapq.heappop(queue)
        
        if current_distance>distances[current_node]:
            continue
            
        for neighbour, weight in graph[current_node].items():
            distance=current_distance+weight
            
            if distance<distances[neighbour]:
                distances[neighbour]=distance
                heapq.heappush(queue,(distance,neighbour))
                
    return distances
    
    
dijkstras(graph,'A')
